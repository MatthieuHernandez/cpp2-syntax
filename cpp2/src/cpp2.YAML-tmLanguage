---
"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
name: cpp2

variables:
  identifier: '[_[:alpha:]][_[:alnum:]]*'
  namespaced_identifier: '((?:{{identifier}}::)*)({{identifier}})'
  colon: ':(?:[\s]|$)'
  coloncolon: '::'

patterns:
- include: '#comment'
- include: '#function-definition'
- include: '#scoped-code-block'
- include: '#statement'

repository:
  punctuation-comma:
    name: punctuation.separator.comma.cpp2
    match: ','

  punctuation-colon:
    name: punctuation.separator.colon.cpp2
    match: '{{colon}}'

  definition:
    name: meta.definition.cpp2
    patterns:
    - include: '#function-definition'

  expression:
    name: meta.expression.cpp2
    patterns:
    - include: '#inspect'
    - include: '#unnamed-function'
    - include: '#string'
    - include: '#character'
    - include: '#numeric-literal'
    - include: '#boolean-literal'
    - include: '#operators'
    - include: '#new'
    - include: '#function-call'
    - include: '#variable-definition-typed'
    - include: '#variable-name'

  return-statement:
    name: meta.return-statement.cpp2
    begin: \b(return)\b
    beginCaptures:
      "1": { name: keyword.control.return.cpp2 }
    end: (?<=;)
    patterns:
    - include: '#expression'

  statement:
    name: meta.statement.cpp2
    patterns:
    - include: '#return-statement'
    - include: '#if'
    - include: '#else'
    - include: '#while'
    - include: '#next'
    - include: '#for'
    - include: '#do'
    - include: '#expression'

  namespace-access:
    patterns:
    - begin: (?:({{identifier}})(::))
      beginCaptures:
        "1": { name: entity.name.namespace.cpp2 }
        "2": { name: punctuation.static-accessor.cpp2 }
      end: (?={{identifier}}[^\w:])
      patterns:
      - include: '#namespace-access'     

  variable-name:
    name: meta.definition.variable.cpp2
    match: '{{namespaced_identifier}}'
    captures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.variable.cpp2 }

  variable-definition-typed:
    name: meta.definition.variable.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      ({{colon}})\s*
    beginCaptures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.variable.declaration.cpp2 }
      "3": { name: punctuation.separator.colon.cpp2 }
    end: (?<=;)
    patterns:
    - include: '#typing'
    - include: '#assignment'

  assignment:
    name: meta.assignment.cpp2
    begin: |
      (?x)
      (=)\s*
    beginCaptures:
      "1": { name: keyword.operator.assignment.cpp2 }
    end: (?<=;)
    endCaptures:
      "0": { name: punctuation.terminator.statement.cpp2 }
    patterns:
    - include: '#expression'

  function-definition:
    name: meta.definition.function.cpp2
    begin: |
      (?x)
      ({{identifier}})
      (?=\s*[:]\s*[\(])
    beginCaptures:
      "1": { name: entity.name.function.declaration.cpp2 }
    end: (?<=[=])
    patterns:
    - include: '#function-typing'

  unnamed-function:
    name: meta.definition.unnamed-function.cpp2
    begin: (:)(?=[\s\(])
    beginCaptures:
      "1": { name: punctuation.separator.colon.cpp2 }
    end: (?<=[\};])
    patterns:
    - include: '#function-type'
    - include: '#scoped-code-block'
    - include: '#expression'

  scoped-code-block:
    begin: (\{)
    beginCaptures:
      "1": { name: punctuation.curlybrace.open.cpp2 }
    end: (\})
    endCaptures:
      "1": { name: punctuation.curlybrace.close.cpp2 }
    patterns:
    - include: '#code-block-content'

  code-block-content:
    patterns:
    - include: '#comment'
    - include: '#statement'
    - include: '#scoped-code-block'

  binary-operator:
    name: keyword.operator.cpp2
    match: |
      (?x)
      (
        = | := |
        \+ | - | \* | / | % | 
        \+= | -= | \*= | /= | %= |
        << | >> | & | \| | \^ | 
        <<= | >>= | &= | \|= | \^= |
        && | \|\| |
        &&= | \|\|= |
        == | != | < | > | <= | >= | <=> 
      )

  unary-operator:
    name: keyword.operator.cpp2
    match: |
      (?x)
      (?<={{namespaced_identifier}})
      (
        \+\+ | -- |
        &    | \$ |
        \.
      )

  square-brackets-operator:
    name: keyword.operator.square-brackets.cpp2
    begin: (\[)
    beginCaptures:
      "1": { name: punctuation.squarebracket.open.cpp2 }
    end: (\])
    endCaptures:
      "1": { name: punctuation.squarebracket.close.cpp2 }
    patterns:
    - include: '#expression'
  
  operators:
    patterns:
    - include: '#binary-operator'
    - include: '#unary-operator'
    - include: '#square-brackets-operator'

  if:
    name: meta.control.if.cpp2
    begin: \b(if)\b
    beginCaptures:
      "1": { name: keyword.control.if.cpp2 }
    end: (?=[\{])
    patterns:
    - include: '#expression'
  
  else:
    name: meta.control.else.cpp2
    begin: \b(else)\b
    beginCaptures:
      "1": { name: keyword.control.else.cpp2 }
    end: (?=[\{])

  while:
    name: meta.control.while.cpp2
    begin: \b(while)\b
    beginCaptures:
      "1": { name: keyword.control.while.cpp2 }
    end: (?=[\{;]|next)
    patterns:
    - include: '#expression'

  next:
    name: meta.control.next.cpp2
    begin: \b(next)\b
    beginCaptures:
      "1": { name: keyword.control.next.cpp2 }
    end: (?=[\{;])
    patterns:
    - include: '#expression'
  
  do:
    name: meta.control.do.cpp2
    begin: \b(do)\b
    beginCaptures:
      "1": { name: keyword.control.do.cpp2 }
    end: (?=[\{])

  for:
    name: meta.control.for.cpp2
    begin: \b(for)\b
    beginCaptures:
      "1": { name: keyword.control.for.cpp2 }
    end: (?=[\}])
    patterns:
    - match: \b(do)\b
      name: keyword.control.do.cpp2
    - include: '#expression'
    - include: '#unnamed-function'

  new:
    name: meta.control.new.cpp2
    patterns:
      - match: \b(new)\.(unique)\b
        captures:
          "1": { name: keyword.control.new.cpp2 }
          "2": { name: keyword.control.new.unique.cpp2 }
      - match: \b(new)\.(shared)\b
        captures:
          "1": { name: keyword.control.new.cpp2 }
          "2": { name: keyword.control.new.shared.cpp2 }
      - match: \b(new)\b
        captures:
          "1": { name: keyword.control.new.cpp2 }
      - match: \b(gc)\.(new)\b
        captures:
          "1": { name: keyword.control.gc.cpp2 }
          "2": { name: keyword.control.new.cpp2 }
      - match: \b(delete)\b
        captures:
          "1": { name: keyword.control.delete.cpp2 }

  inspect:
    name: meta.control.inspect.cpp2
    begin: |
      (?x)
      \b(inspect)\b\s*
      {{namespaced_identifier}}\s*
      (->)\s*
      {{namespaced_identifier}}
    beginCaptures:
      "1": { name: keyword.control.inspect.cpp2 }
      "2": 
        patterns: 
        - include: '#namespace-access'
      "3": { name: entity.name.variable.cpp2 }
      "4": { name: keyword.operator.cpp2 }
      "5": 
        patterns: 
        - include: '#namespace-access'
      "6": { name: entity.name.type.cpp2 }
    end: (?<=[\}])
    patterns:
    - include: '#inspect-block'
  
  inspect-block:
    begin: (\{)
    beginCaptures:
      "1": { name: punctuation.curlybrace.open.cpp2 }
    end: (\})
    endCaptures:
      "1": { name: punctuation.curlybrace.close.cpp2 }
    patterns:
    - include: '#is'

  is:
    name: meta.control.inspect.is.cpp2
    begin: |
      (?x)
      \b(is)\b\s*
      ({{namespaced_typename}})\s*
      (=)
    beginCaptures:
      "1": { name: keyword.control.inspect.is.cpp2 }
      "2": 
        patterns: 
        - include: '#namespace-access-type'
      "4": { name: keyword.operator.cpp2 }
    end: (?=[;])
    patterns:
    - include: '#expression'

  as-operator:
    name: meta.operator.as.cpp2
    match: |
      (?x)
      \b(as)\b\s*
      {{namespaced_identifier}}\s*
    captures:
      "1": { name: keyword.control.operator.as.cpp2 }
      "2": 
        patterns: 
        - include: '#namespace-access'
      "3": { name: entity.name.type.cpp2 }

  function-typing:
    name: meta.typing.cpp2
    begin: (:)(?=[\s\(])
    beginCaptures:
      "1": { name: punctuation.separator.colon.cpp2 }
    end: (?=\s*(?=[=;]))
    patterns:
    - include: '#function-type'

  type:
    name: meta.type.cpp2
    patterns:
    - include: '#function-type'
  #   - include: '#type-builtin'
    - include: '#type-name'
    - include: '#pointer-type'

  pointer-type:
    begin: (\*)
    beginCaptures:
      "1": { name: keyword.operator.pointer.cpp2 }
    end: (?=\s*(?=[=;]))
    patterns:
    - include: '#type'

  # type-builtin:
  #   match: \b(string|bool|i8|u8|i16|u16|i32|u32|i64|u64|f32|f64)\b
  #   captures:
  #     '1':
  #       name: keyword.type.cpp2

  typing:
    name: meta.typing.cpp2
    begin: (?<={{colon}})\s*
    end: (?=\s*(?=[=;]))
    patterns:
    - include: '#type'   

  type-name:
    patterns:
    - match: ({{identifier}})\s*(::)
      captures:
        '1': { name: entity.name.namespace.cpp2 }
        '2': { name: punctuation.static-accessor.cpp2 }
    - match: (::)\s*({{identifier}})
      captures:
        '1': { name: punctuation.static-accessor.cpp2 }
        '2': { name: entity.name.type.cpp2 }
    - name: entity.name.type.cpp2
      match: '{{identifier}}'

  function-return-type-separator:
    name: punctuation.separator.function-return-type.cpp2
    match: '->'

  function-type:
    name: meta.function-type.cpp2
    begin: |
      (?x)
      (?=\()
    end: (?=[=;])
    patterns:
    - include: '#parenthesized-parameters'
    - include: '#function-return-type-separator'
    - include: '#type'
  
  parameter-modifier:
    name: storage.modifier.cpp2
    match: \b(in|out|inout|copy|move|forward)\b

  parameter-name:
    match: |
      (?x)
      ({{identifier}})
    captures:
      '1': { name: entity.name.variable.parameter.cpp2 }

  parameter:
    name: meta.parameter.cpp2
    begin: |
      (?x)
      (?:(\w+)?\s+)?
      ({{identifier}})\s*
      (:)\s*
    beginCaptures:
      "1":  
        patterns:
        - include: '#parameter-modifier'
      "2":
        patterns:
        - include: '#parameter-name'
      "3": 
        name: punctuation.separator.colon.cpp2
    end: (?=[\)\,])
    patterns: 
    - include: '#type-name'

  parenthesized-parameters:
    name: meta.function.parameters.cpp2
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.parameters.begin.cpp2}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.parameters.end.cpp2}
    patterns:
    - include: '#comment'
    - include: '#parameter'
    - include: '#punctuation-comma'

  # enum-declaration:
  #   name: meta.enum.cpp2
  #   begin: \b(enum)\b\s+
  #   beginCaptures:
  #     '1': { name: keyword.other.enum.cpp2 }
  #   end: (?<=\})
  #   patterns:
  #   - include: '#enum-name'
  #   - begin: \{
  #     beginCaptures:
  #       '0': { name: punctuation.definition.enum.open.cpp2 }
  #     end: \}
  #     endCaptures:
  #       '0': { name: punctuation.definition.enum.open.cpp2 }
  #     patterns:
  #     - include: '#comment'
  #     - begin: ({{identifier}})
  #       beginCaptures:
  #         '1': { name: variable.other.enummember.cpp2 }
  #       end: (?=[,\n\}])
  #       patterns:
  #       - include: '#struct-definition'

  comment:
    patterns:
    - name: comment.block.cpp2
      begin: /\*
      beginCaptures:
        '0': { name: punctuation.definition.comment.cpp2 }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.cpp2 }
    - begin: (^\s+)?(?=//)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.cpp2 }
      end: (?=$)
      patterns:
      - name: comment.block.documentation.cpp2
        begin: (?<!/)///(?!/)
        beginCaptures:
          '0': { name: punctuation.definition.comment.cpp2 }
        end: (?=$)
      - name: comment.line.double-slash.cpp2
        begin: (?<!/)//(?:(?!/)|(?=//))
        beginCaptures:
          '0': { name: punctuation.definition.comment.cpp2 }
        end: (?=$)

  function-call:
    name: meta.function-call.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      (?=\()
    beginCaptures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.function.cpp2 }

    end: (?<=\))
    patterns:
      - include: '#function-arguments'

  function-name:
    patterns:
      - match: |
          (?x)
            \b ({{identifier}}) \b
        captures:
          '1': { name: entity.name.function.cpp2 }

  function-arguments:
    name: meta.function.arguments.cpp2
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.arguments.begin.cpp2}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.arguments.end.cpp2}
    patterns:
    - include: '#comment'
    - include: '#expression'
    - include: '#punctuation-comma'

  boolean-literal:
    name: constant.language.boolean.cpp2
    match: \b(true|false)\b

  numeric-literal:
    comment: TODO taken from C# as is. Need to modify.
    match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|_)|(?<=[eE])[+-])*"
    captures:
      '0':
        patterns:
        - begin: "(?=.)"
          end: "$"
          patterns:
          # Decimal number (with optional thousands separator) with mandatory decimal part (with optional thousands separator) and optional exponent (also with optional thousands separator)
          - match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\\w))?$"
            captures:
              '2':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '3':
                name: constant.numeric.other.separator.thousands.cpp2
              '4':
                name: constant.numeric.other.separator.decimals.cpp2
              '5':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '6':
                name: constant.numeric.other.separator.thousands.cpp2
              '8':
                name: constant.numeric.other.exponent.cpp2
              '9':
                name: keyword.operator.arithmetic.cpp2
              '10':
                name: keyword.operator.arithmetic.cpp2
              '11':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '12':
                name: constant.numeric.other.suffix.cpp2
          # Binary number (with optional thousands separator)
          - match: "(\\G0[bB])([01_](?:[01_]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
            captures:
              '1':
                name: constant.numeric.other.preffix.binary.cpp2
              '2':
                name: constant.numeric.binary.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '3':
                name: constant.numeric.other.separator.thousands.cpp2
              '4':
                name: constant.numeric.other.suffix.cpp2
          # Hexadecimal number (with optional thousands separator)
          - match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
            captures:
              '1':
                name: constant.numeric.other.preffix.hex.cpp2
              '2':
                name: constant.numeric.hex.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '3':
                name: constant.numeric.other.separator.thousands.cpp2
              '4':
                name: constant.numeric.other.suffix.cpp2
          # Integral number (with optional thousands separator) with no decimal part and optional exponent (also with optional thousands separator)
          - match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
            captures:
              '2':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '3':
                name: constant.numeric.other.separator.thousands.cpp2
              '5':
                name: constant.numeric.other.exponent.cpp2
              '6':
                name: keyword.operator.arithmetic.cpp2
              '7':
                name: keyword.operator.arithmetic.cpp2
              '8':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '9':
                name: constant.numeric.other.suffix.cpp2
          # Capture the rest as an invalid numeric literal
          - match: "(?:(?:[0-9a-zA-Z_\\.]|_)|(?<=[eE])[+-])+"
            name: invalid.illegal.constant.numeric.cpp2

  string:
    name: string.quoted.double.cpp2
    begin: "\""
    end: "\""
    patterns:
    - name: constant.character.escape.cpp2
      match: "\\\\."
  character:
    name: string.quoted.single.cpp2
    begin: "'"
    end: "'"
    patterns:
    - name: constant.character.escape.cpp2
      match: "\\\\."

scopeName: source.cpp2
