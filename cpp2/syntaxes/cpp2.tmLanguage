<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>$schema</key>
    <string>https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json</string>
    <key>name</key>
    <string>cpp2</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#cpp1-block</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#comment</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#type-alias-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#namespace-alias-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#enum-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#type-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#namespace-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#function-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#scoped-code-block</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#statement</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>punctuation-comma</key>
      <dict>
        <key>name</key>
        <string>punctuation.separator.comma.cpp2</string>
        <key>match</key>
        <string>,</string>
      </dict>
      <key>expression</key>
      <dict>
        <key>name</key>
        <string>meta.expression.cpp2</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#inspect</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#as</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#cast</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#is</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#unnamed-function</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-range</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#new</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-call</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-alias-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#namespace-alias-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-definition-typed</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-definition-auto</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#known-std-symbols</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-expression</string>
          </dict>
        </array>
      </dict>
      <key>type-expression</key>
      <dict>
        <key>name</key>
        <string>meta.type-expression.cpp2</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.auto-type.cpp2</string>
            <key>match</key>
            <string>\b(_)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.auto.cpp2</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-tuple</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decltype</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>type-tuple</key>
      <dict>
        <key>name</key>
        <string>meta.type.tuple.cpp2</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.tuple.begin.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.tuple.end.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#typed-parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>parenthesized-expression</key>
      <dict>
        <key>name</key>
        <string>meta.parenthesized-expression.cpp2</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.expression.begin.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.expression.end.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>return-statement</key>
      <dict>
        <key>name</key>
        <string>meta.return-statement.cpp2</string>
        <key>begin</key>
        <string>\b(return)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.return.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.terminator.statement.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>statement</key>
      <dict>
        <key>name</key>
        <string>meta.statement.cpp2</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#return-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#if</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#else-if</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#else</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#while</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#labeled-while</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#continue</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#break</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#next</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#for</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#labeled-for</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#do</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#labeled-do</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#scoped-code-block-with-local-variables-start</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>namespace-access</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?:([_[:alpha:]][_[:alnum:]]*)(::))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.namespace.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.static-accessor.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[_[:alpha:]][_[:alnum:]]*[^\w:])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>variable-name</key>
      <dict>
        <key>name</key>
        <string>meta.entity.variable.cpp2</string>
        <key>match</key>
        <string>((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.cpp2</string>
          </dict>
        </dict>
      </dict>
      <key>namespace-alias-definition</key>
      <dict>
        <key>name</key>
        <string>meta.definition.namespace-alias.cpp2</string>
        <key>begin</key>
        <string>(?x)
((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)\s*
(:(?:[\s]+|$))\s*
\b(namespace)\b\s*
(==)\s*
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.declaration.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.other.namespace-alias.cpp2</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#namespace-name</string>
          </dict>
        </array>
      </dict>
      <key>namespace-name</key>
      <dict>
        <key>name</key>
        <string>meta.definition.namespace.cpp2</string>
        <key>match</key>
        <string>((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.namespace.cpp2</string>
          </dict>
        </dict>
      </dict>
      <key>type-alias-definition</key>
      <dict>
        <key>name</key>
        <string>meta.definition.type-alias.cpp2</string>
        <key>begin</key>
        <string>(?x)
((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)\s*
(:(?:[\s]+|$))\s*
(.*?)\s*
\b(type)\b\s*
(==)\s*
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.declaration.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#template</string>
              </dict>
            </array>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.other.type-alias.cpp2</string>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>namespace-definition</key>
      <dict>
        <key>name</key>
        <string>meta.definition.namespace.cpp2</string>
        <key>begin</key>
        <string>(?x)
([_[:alpha:]][_[:alnum:]]*)\s*
(:)\s*
\b(namespace)\b\s*
([=])
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.declaration.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.other.namespace.cpp2</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#scoped-namespace-block</string>
          </dict>
        </array>
      </dict>
      <key>scoped-namespace-block</key>
      <dict>
        <key>begin</key>
        <string>(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\})</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#namespace-block-content</string>
          </dict>
        </array>
      </dict>
      <key>namespace-block-content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#cpp1-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-alias-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#namespace-alias-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#enum-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#namespace-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#scoped-code-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
        </array>
      </dict>
      <key>enum-definition</key>
      <dict>
        <key>name</key>
        <string>meta.definition.enum.cpp2</string>
        <key>begin</key>
        <string>(?x)
([_[:alpha:]][_[:alnum:]]*)\s*
(:)\s*
(@enum|@flag_enum)\s*
\b(type)\b\s*
([=])
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.declaration.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#annotation</string>
              </dict>
            </array>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.other.type.cpp2</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#scoped-enum-block</string>
          </dict>
        </array>
      </dict>
      <key>scoped-enum-block</key>
      <dict>
        <key>begin</key>
        <string>(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\})</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#enum-block-content</string>
          </dict>
        </array>
      </dict>
      <key>enum-block-content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
([_[:alpha:]][_[:alnum:]]*)\s*
([;])
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.enummember.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.terminator.statement.cpp2</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)
([_[:alpha:]][_[:alnum:]]*)\s*
(:=)\s*
</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.enummember.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>type-definition</key>
      <dict>
        <key>name</key>
        <string>meta.definition.type.cpp2</string>
        <key>begin</key>
        <string>(?x)
([_[:alpha:]][_[:alnum:]]*)\s*
(:)\s*
(.*?)\s*
\b(type)\b\s*
([=])
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.declaration.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#annotation</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-modifier</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#template</string>
              </dict>
            </array>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.other.type.cpp2</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#scoped-type-block</string>
          </dict>
        </array>
      </dict>
      <key>type-modifier</key>
      <dict>
        <key>name</key>
        <string>storage.modifier.cpp2</string>
        <key>match</key>
        <string>\b(final)\b</string>
      </dict>
      <key>annotation</key>
      <dict>
        <key>name</key>
        <string>meta.annotation.cpp2</string>
        <key>match</key>
        <string>(@)([_[:alpha:]][_[:alnum:]]*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.annotation.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.annotation.cpp2</string>
          </dict>
        </dict>
      </dict>
      <key>value-template-parameter</key>
      <dict>
        <key>begin</key>
        <string>([_[:alpha:]][_[:alnum:]]*)\s*(:)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.constant.template.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[,&gt;])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>type-template-parameter</key>
      <dict>
        <key>begin</key>
        <string>([_[:alpha:]][_[:alnum:]]*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.template.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[,&gt;])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>template-parameter</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#value-template-parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-template-parameter</string>
          </dict>
        </array>
      </dict>
      <key>template</key>
      <dict>
        <key>name</key>
        <string>meta.template.cpp2</string>
        <key>begin</key>
        <string>(&lt;(?![&lt;&gt;=]))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.anglebracket.open.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(&gt;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.anglebracket.close.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#template-parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>scoped-type-block</key>
      <dict>
        <key>begin</key>
        <string>(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\})</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-block-content</string>
          </dict>
        </array>
      </dict>
      <key>member-modifier</key>
      <dict>
        <key>name</key>
        <string>storage.modifier.cpp2</string>
        <key>match</key>
        <string>\b(public|private|protected)\b</string>
      </dict>
      <key>type-block-content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#member-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operator-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-definition-typed</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-definition-auto</string>
          </dict>
        </array>
      </dict>
      <key>variable-inline-definition-typed</key>
      <dict>
        <key>name</key>
        <string>meta.definition.variable-typed.cpp2</string>
        <key>begin</key>
        <string>(?x)
((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)\s*
(?=:(?:[\s]+|$))
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.declaration.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#typing</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#assignment-for-inline-variable</string>
          </dict>
        </array>
      </dict>
      <key>variable-inline-definition-auto</key>
      <dict>
        <key>name</key>
        <string>meta.definition.variable-auto.cpp2</string>
        <key>begin</key>
        <string>(?x)
((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)\s*
(:)(?=[=])
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.declaration.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=[,\)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#assignment-for-inline-variable</string>
          </dict>
        </array>
      </dict>
      <key>assignment-for-inline-variable</key>
      <dict>
        <key>name</key>
        <string>meta.assignment-for-inline-variable.cpp2</string>
        <key>begin</key>
        <string>(?x)
(=)\s*
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=[,\)])</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.terminator.statement.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>variable-definition-typed</key>
      <dict>
        <key>name</key>
        <string>meta.definition.variable-typed.cpp2</string>
        <key>begin</key>
        <string>(?x)
((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)\s*
(?=:(?:[\s]+|$))
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.declaration.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#typing</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#assignment</string>
          </dict>
        </array>
      </dict>
      <key>variable-definition-auto</key>
      <dict>
        <key>name</key>
        <string>meta.definition.variable-auto.cpp2</string>
        <key>begin</key>
        <string>(?x)
((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)\s*
(:)(?=[=])
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.declaration.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#assignment</string>
          </dict>
        </array>
      </dict>
      <key>assignment</key>
      <dict>
        <key>name</key>
        <string>meta.assignment.cpp2</string>
        <key>begin</key>
        <string>(?x)
(=)\s*
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=;)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.terminator.statement.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>function-definition</key>
      <dict>
        <key>name</key>
        <string>meta.definition.function.cpp2</string>
        <key>begin</key>
        <string>(?x)
([_[:alpha:]][_[:alnum:]]*)
(?=\s*[:]\s*[\(|&lt;])
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.declaration.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=[\};])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-typing</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#scoped-code-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>unnamed-function</key>
      <dict>
        <key>name</key>
        <string>meta.definition.unnamed-function.cpp2</string>
        <key>begin</key>
        <string>(:)(?=[\s\(])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=[\};])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#scoped-code-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>operator-definition</key>
      <dict>
        <key>name</key>
        <string>meta.definition.operator.cpp2</string>
        <key>begin</key>
        <string>(?x)
(operator)
(=
|\+|-|\*|/|%|\+=|-=|\*=|/=|%=
|&lt;&lt;|&gt;&gt;|&amp;|\||\^|&lt;&lt;=|&gt;&gt;=|&amp;=|\|=|\^=
|&amp;&amp;|\|\||&amp;&amp;=|\|\|=
|==|!=|&lt;|&gt;|&lt;=|&gt;=|&lt;=&gt;
|\(\)|\[\]
)
(?=\s*[:]\s*[\(])
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.operator.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=[\};])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-typing</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#scoped-code-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>scoped-code-block</key>
      <dict>
        <key>begin</key>
        <string>(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\})</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#code-block-content</string>
          </dict>
        </array>
      </dict>
      <key>variable-modifier</key>
      <dict>
        <key>name</key>
        <string>storage.modifier.cpp2</string>
        <key>match</key>
        <string>\b(copy|move|inout)\b</string>
      </dict>
      <key>scoped-code-block-with-local-variables-start</key>
      <dict>
        <key>begin</key>
        <string>(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.open.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parenthesis.close.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#scoped-code-block-with-local-variables-start-content</string>
          </dict>
        </array>
        <key>name</key>
        <string>meta.definition.scoped-code-block-with-local-variables-start.cpp2</string>
      </dict>
      <key>scoped-code-block-with-local-variables-start-content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#variable-inline-definition-auto</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>code-block-content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#cpp1-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#scoped-code-block</string>
          </dict>
        </array>
      </dict>
      <key>comparison-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.comparison.cpp2</string>
        <key>match</key>
        <string>(?x)
( == | != | &lt; | &gt; | &lt;= | &gt;= | &lt;=&gt; )
</string>
      </dict>
      <key>logical-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.logical.cpp2</string>
        <key>match</key>
        <string>(?x)
( &amp;&amp; | \|\| )
</string>
      </dict>
      <key>bitwise-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.bitwise.cpp2</string>
        <key>match</key>
        <string>(?x)
( &lt;&lt; | &gt;&gt; | &amp; | \| | \^ )
</string>
      </dict>
      <key>assignment-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.assignment.cpp2</string>
        <key>match</key>
        <string>(?x)
( \+= | -= | \*= | /= | %= | &lt;&lt;= | &gt;&gt;= | &amp;= | \|= | \^= | &amp;&amp;= | \|\|= )
</string>
      </dict>
      <key>arithmetic-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.arithmetic.cpp2</string>
        <key>match</key>
        <string>(?x)
( \+ | - | \* | / | % )
</string>
      </dict>
      <key>range-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.range.cpp2</string>
        <key>match</key>
        <string>(?x)
( \.\.= | \.\.&lt; )
</string>
      </dict>
      <key>binary-operator</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comparison-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#logical-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#bitwise-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#assignment-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#arithmetic-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#range-operator</string>
          </dict>
        </array>
      </dict>
      <key>unary-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.unary.cpp2</string>
        <key>match</key>
        <string>(?x)
(?&lt;=((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*))
(
  \+\+ | -- |
  &amp;    | \$ |
  \.
)
</string>
      </dict>
      <key>square-brackets-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.square-brackets.cpp2</string>
        <key>begin</key>
        <string>(\[)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.squarebracket.open.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\])</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.squarebracket.close.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#binary-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#unary-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#square-brackets-operator</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.keyword.operator-move.cpp2</string>
            <key>match</key>
            <string>\b(move)\b</string>
          </dict>
        </array>
      </dict>
      <key>if</key>
      <dict>
        <key>name</key>
        <string>meta.control.if.cpp2</string>
        <key>begin</key>
        <string>\b(if)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.if.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>else</key>
      <dict>
        <key>name</key>
        <string>meta.control.else.cpp2</string>
        <key>begin</key>
        <string>\b(else)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.else.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{])</string>
      </dict>
      <key>else-if</key>
      <dict>
        <key>name</key>
        <string>meta.control.else-if.cpp2</string>
        <key>begin</key>
        <string>\b(else)\b\s*\b(if)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.else.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.if.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>labeled-while</key>
      <dict>
        <key>name</key>
        <string>meta.control.while.cpp2</string>
        <key>begin</key>
        <string>(?x)
([_[:alpha:]][_[:alnum:]]*)\s*
(:(?:[\s]+|$))
\b(while)\b
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.label.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.control.while.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{;]|next)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>while</key>
      <dict>
        <key>name</key>
        <string>meta.control.while.cpp2</string>
        <key>begin</key>
        <string>\b(while)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.while.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{;]|next)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>continue</key>
      <dict>
        <key>name</key>
        <string>meta.control.continue.cpp2</string>
        <key>match</key>
        <string>(?x)
\b(continue)\s*
\b([_[:alpha:]][_[:alnum:]]*)?
</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.continue.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.label.cpp2</string>
          </dict>
        </dict>
      </dict>
      <key>break</key>
      <dict>
        <key>name</key>
        <string>meta.control.break.cpp2</string>
        <key>match</key>
        <string>(?x)
\b(break)\s*
\b([_[:alpha:]][_[:alnum:]]*)?
</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.break.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.label.cpp2</string>
          </dict>
        </dict>
      </dict>
      <key>next</key>
      <dict>
        <key>name</key>
        <string>meta.control.next.cpp2</string>
        <key>begin</key>
        <string>\b(next)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.next.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{;]|do)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>labeled-do</key>
      <dict>
        <key>name</key>
        <string>meta.control.labeled-do.cpp2</string>
        <key>begin</key>
        <string>(?x)
([_[:alpha:]][_[:alnum:]]*)\s*
(:(?:[\s]+|$))
\b(do)\b
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.label.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.control.do.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>do</key>
      <dict>
        <key>name</key>
        <string>meta.control.do.cpp2</string>
        <key>begin</key>
        <string>\b(do)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.do.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parenthesized-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>labeled-for</key>
      <dict>
        <key>name</key>
        <string>meta.control.labeled-for.cpp2</string>
        <key>begin</key>
        <string>(?x)
([_[:alpha:]][_[:alnum:]]*)\s*
(:(?:[\s]+|$))
\b(for)\b
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.label.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.control.for.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{]|next|do)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#unnamed-function</string>
          </dict>
        </array>
      </dict>
      <key>for</key>
      <dict>
        <key>name</key>
        <string>meta.control.for.cpp2</string>
        <key>begin</key>
        <string>\b(for)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.for.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{]|next|do)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#unnamed-function</string>
          </dict>
        </array>
      </dict>
      <key>new</key>
      <dict>
        <key>name</key>
        <string>meta.control.new.cpp2</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(new)\.(unique)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.new.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.new.unique.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=[&gt;])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-inside-angle-brackets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(new)\.(shared)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.new.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.new.shared.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=[&gt;])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-inside-angle-brackets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(new)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.new.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=[&gt;])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-inside-angle-brackets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(gc)\.(new)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.gc.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.new.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=[&gt;])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-inside-angle-brackets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(delete)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.delete.cpp2</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>type-inside-angle-brackets</key>
      <dict>
        <key>name</key>
        <string>meta.type.inside-angle-brackets.cpp2</string>
        <key>begin</key>
        <string>(&lt;(?![&lt;&gt;=]))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.anglebracket.open.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(&gt;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.anglebracket.close.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>inspect</key>
      <dict>
        <key>name</key>
        <string>meta.control.inspect.cpp2</string>
        <key>begin</key>
        <string>(?x)
\b(inspect)\b
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.inspect.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=[\}])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#inspected-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#inspect-return-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#inspect-block</string>
          </dict>
        </array>
      </dict>
      <key>inspected-expression</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;=\b(inspect)\b)\s*</string>
        <key>end</key>
        <string>(?=-&gt;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.inspect.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>inspect-return-type</key>
      <dict>
        <key>begin</key>
        <string>(-&gt;)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.inspect.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\{)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>inspect-block</key>
      <dict>
        <key>begin</key>
        <string>(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.open.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\})</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.curlybrace.close.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#is</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>is</key>
      <dict>
        <key>name</key>
        <string>meta.control.is.cpp2</string>
        <key>begin</key>
        <string>\b(is)\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.is.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\{=)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>as</key>
      <dict>
        <key>name</key>
        <string>meta.operator.as.cpp2</string>
        <key>begin</key>
        <string>\b(as)\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.operator.as.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;{}()\[\]&lt;=&gt;]|$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>cast</key>
      <dict>
        <key>name</key>
        <string>meta.operator.cast.cpp2</string>
        <key>begin</key>
        <string>\b(unchecked_narrow|unchecked_cast)\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.cast.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=[&gt;])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-inside-angle-brackets</string>
          </dict>
        </array>
      </dict>
      <key>function-typing</key>
      <dict>
        <key>name</key>
        <string>meta.typing.cpp2</string>
        <key>begin</key>
        <string>(:)(?=[\s*[\(&lt;]])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\s*(?=[=;]))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-type</string>
          </dict>
        </array>
      </dict>
      <key>type</key>
      <dict>
        <key>name</key>
        <string>meta.type.cpp2</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-template-instance</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#pointer-type</string>
          </dict>
        </array>
      </dict>
      <key>pointer-type</key>
      <dict>
        <key>begin</key>
        <string>(\*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.pointer.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\s*(?=[=;]))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>typing</key>
      <dict>
        <key>name</key>
        <string>meta.typing.cpp2</string>
        <key>begin</key>
        <string>(:)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\s*(?=[=;]))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>type-name</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>([_[:alpha:]][_[:alnum:]]*)\s*(::)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.namespace.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.static-accessor.cpp2</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(::)\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.static-accessor.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.cpp2</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.type.cpp2</string>
            <key>match</key>
            <string>[_[:alpha:]][_[:alnum:]]*</string>
          </dict>
        </array>
      </dict>
      <key>type-template-instance</key>
      <dict>
        <key>name</key>
        <string>meta.type.template-instance.cpp2</string>
        <key>begin</key>
        <string>(?x)
((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)\s*
(&lt;(?![&lt;&gt;=]))
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.cpp2</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.template.begin.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(&gt;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.template.end.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.type.template-instance-parameter.cpp2</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-expression</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>function-return-type-separator</key>
      <dict>
        <key>name</key>
        <string>punctuation.separator.function-return-type.cpp2</string>
        <key>match</key>
        <string>-&gt;</string>
      </dict>
      <key>function-type</key>
      <dict>
        <key>name</key>
        <string>meta.function-type.cpp2</string>
        <key>begin</key>
        <string>(?x)
(?=[\(&lt;])
</string>
        <key>end</key>
        <string>(?=[=;])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#template</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parenthesized-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-trailing-return</string>
          </dict>
        </array>
      </dict>
      <key>function-trailing-return</key>
      <dict>
        <key>begin</key>
        <string>(?x)
(-&gt;)\s*
(forward)?\s*
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.function-return-type.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[=;])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-expression</string>
          </dict>
        </array>
      </dict>
      <key>parameter-name</key>
      <dict>
        <key>match</key>
        <string>(?x)
([_[:alpha:]][_[:alnum:]]*)
</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.parameter.cpp2</string>
          </dict>
        </dict>
      </dict>
      <key>untyped-parameter</key>
      <dict>
        <key>name</key>
        <string>meta.untyped-parameter.cpp2</string>
        <key>begin</key>
        <string>(?x)
(?:\b(in|out|implicit\s+out|inout|copy|move|forward|virtual)\b\s+)?
([_[:alpha:]][_[:alnum:]]*)\s*
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parameter-name</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\)\,])</string>
      </dict>
      <key>typed-parameter</key>
      <dict>
        <key>name</key>
        <string>meta.typed-parameter.cpp2</string>
        <key>begin</key>
        <string>(?x)
(?:\b(in|out|implicit\s+out|inout|copy|move|forward|virtual)\b\s+)?
([_[:alpha:]][_[:alnum:]]*)\s*
(:)\s*
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parameter-name</string>
              </dict>
            </array>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\)\,])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-name</string>
          </dict>
        </array>
      </dict>
      <key>parameter</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#typed-parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#untyped-parameter</string>
          </dict>
        </array>
      </dict>
      <key>parenthesized-parameters</key>
      <dict>
        <key>name</key>
        <string>meta.function.parameters.cpp2</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.begin.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.end.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>comment</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.block.cpp2</string>
            <key>begin</key>
            <string>/\*</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.cpp2</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>(^\s+)?(?=//)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.comment.leading.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>comment.block.documentation.cpp2</string>
                <key>begin</key>
                <string>(?&lt;!/)///(?!/)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.cpp2</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$)</string>
              </dict>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash.cpp2</string>
                <key>begin</key>
                <string>(?&lt;!/)//(?:(?!/)|(?=//))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.cpp2</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$)</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>function-call</key>
      <dict>
        <key>name</key>
        <string>meta.function-call.cpp2</string>
        <key>begin</key>
        <string>(?x)
((?:[_[:alpha:]][_[:alnum:]]*::)*)([_[:alpha:]][_[:alnum:]]*)\s*
(?=\()
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#namespace-access</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-arguments</string>
          </dict>
        </array>
      </dict>
      <key>function-name</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?x)
  \b ([_[:alpha:]][_[:alnum:]]*) \b
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.cpp2</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>function-arguments</key>
      <dict>
        <key>name</key>
        <string>meta.function.arguments.cpp2</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.arguments.begin.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.arguments.end.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>tuple</key>
      <dict>
        <key>name</key>
        <string>meta.tuple.cpp2</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.tuple.begin.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.tuple.end.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>boolean</key>
      <dict>
        <key>name</key>
        <string>constant.language.boolean.cpp2</string>
        <key>match</key>
        <string>\b(true|false)\b</string>
      </dict>
      <key>numeric-range</key>
      <dict>
        <key>comment</key>
        <string>This is a special case for range operator `..` that starts with a number. We need it to be a separate rule to avoid conflicts with regular numeric literals.</string>
        <key>match</key>
        <string>(?&lt;!\w)\d+\.\.(=|&lt;)</string>
        <key>captures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?=.)</string>
                <key>end</key>
                <string>$</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>(?&lt;!\w)\d+</string>
                    <key>name</key>
                    <string>constant.numeric.decimal.cpp2</string>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>\.\.(=|&lt;)</string>
                    <key>name</key>
                    <string>keyword.operator.range.cpp2</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>numeric</key>
      <dict>
        <key>comment</key>
        <string>TODO taken from C# as is. Need to modify.</string>
        <key>match</key>
        <string>(?&lt;!\w)\.?\d(?:(?:[0-9a-zA-Z_\.]|_)|(?&lt;=[eE])[+-])*</string>
        <key>captures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?=.)</string>
                <key>end</key>
                <string>$</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>(\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?&lt;=[0-9])|\.(?=[0-9])))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?&lt;!_)([eE])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.cpp2</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands.cpp2</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands.cpp2</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.decimals.cpp2</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.cpp2</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands.cpp2</string>
                          </dict>
                        </array>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands.cpp2</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.exponent.cpp2</string>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic.cpp2</string>
                      </dict>
                      <key>10</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic.cpp2</string>
                      </dict>
                      <key>11</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.cpp2</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands.cpp2</string>
                          </dict>
                        </array>
                      </dict>
                      <key>12</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.suffix.cpp2</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0[bB])([01_](?:[01_]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.preffix.binary.cpp2</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.binary.cpp2</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands.cpp2</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands.cpp2</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.suffix.cpp2</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.preffix.hex.cpp2</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hex.cpp2</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands.cpp2</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands.cpp2</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.suffix.cpp2</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?&lt;!_)([eE])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.cpp2</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands.cpp2</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.separator.thousands.cpp2</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.exponent.cpp2</string>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic.cpp2</string>
                      </dict>
                      <key>7</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic.cpp2</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.cpp2</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])_(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>constant.numeric.other.separator.thousands.cpp2</string>
                          </dict>
                        </array>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.other.suffix.cpp2</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(?:(?:[0-9a-zA-Z_\.]|_)|(?&lt;=[eE])[+-])+</string>
                    <key>name</key>
                    <string>invalid.illegal.constant.numeric.cpp2</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>string</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double.cpp2</string>
        <key>begin</key>
        <string>"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>"</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.cpp2</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.character.escape.cpp2</string>
            <key>match</key>
            <string>\\.</string>
          </dict>
        </array>
      </dict>
      <key>string-literals</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double.cpp2</string>
        <key>begin</key>
        <string>(u|U|u8|L)(?=")</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.string-literals.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=")</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
        </array>
      </dict>
      <key>raw-string</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double.cpp2</string>
        <key>begin</key>
        <string>(R|uR|u8R|UR|LR)("\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.string-literals.cpp2</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.cpp2</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\)")</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.cpp2</string>
          </dict>
        </dict>
      </dict>
      <key>character</key>
      <dict>
        <key>name</key>
        <string>string.quoted.single.cpp2</string>
        <key>begin</key>
        <string>'</string>
        <key>end</key>
        <string>'</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.character.escape.cpp2</string>
            <key>match</key>
            <string>\\.</string>
          </dict>
        </array>
      </dict>
      <key>nullptr</key>
      <dict>
        <key>name</key>
        <string>constant.language.nullptr.cpp2</string>
        <key>match</key>
        <string>\b(nullptr)\b</string>
      </dict>
      <key>literals</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#numeric</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-literals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#raw-string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#character</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#nullptr</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#boolean</string>
          </dict>
        </array>
      </dict>
      <key>cpp1-block</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.embedded.block.cpp1</string>
            <key>begin</key>
            <string>/\*\s*lang:cpp\s*\*/</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>comment.block.start-of.cpp1.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>/\*\s*lang:end\s*\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>comment.block.end-of.cpp1.cpp2</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>source.cpp</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>known-std-symbols</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.entity.known-primitive-name.cpp2</string>
            <key>match</key>
            <string>(?x)
(int|char|short|long|float|double|bool|void)\b
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.primitive.cpp2</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.entity.known-std-variable-name.cpp2</string>
            <key>match</key>
            <string>(?x)
(std)\s*
(::)\s*
(cout|endl|cin|cerr|clog
|wcout|wendl|wcin|wcerr|wclog
)\b
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.namespace.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.static-accessor.cpp2</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.variable.cpp2</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.entity.known-std-type-name.cpp2</string>
            <key>match</key>
            <string>(?x)
(std)\s*
(::)\s*
(string|thread|mutex|condition_variable)\b
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.namespace.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.static-accessor.cpp2</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.cpp2</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.entity.known-std-type-name.template.cpp2</string>
            <key>begin</key>
            <string>(?x)
(std)\s*
(::)\s*
(vector|map|set|list|queue|stack|priority_queue
|pair|tuple
|function
|lock_guard|unique_lock
|atomic
|dynamic_pointer_cast
)\b
</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.namespace.cpp2</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.static-accessor.cpp2</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.cpp2</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=[&gt;])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-inside-angle-brackets</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>decltype</key>
      <dict>
        <key>name</key>
        <string>keyword.other.decltype.cpp</string>
        <key>begin</key>
        <string>(?x)
\b(decltype)\b\s*
(\()
</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.decltype.cpp</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
    </dict>
    <key>scopeName</key>
    <string>source.cpp2</string>
  </dict>
</plist>